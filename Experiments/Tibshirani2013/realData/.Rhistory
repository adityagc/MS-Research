mean.impute <- function(X){
means <- apply(X,2,function(x){mean(x[which(!is.na(x))])})
for(i in 1:ncol(X)){
ind <- which(is.na(X[,i]))
X[ind,i] <- means[i]
}
return(X)
}
prop.missing <- function(X){
apply(X,2,function(x){mean(is.na(x))})
}
source('C:/Users/achindha/Desktop/MS-Research/Experiments/Tibshirani2013/realData/BreastCancer.R', echo=TRUE)
source('C:/Users/achindha/Desktop/MS-Research/Experiments/Tibshirani2013/realData/BreastCancer.R', echo=TRUE)
install.packages(ggplot)
install.package(ggplot)
s
s
s
install.packages(ggplot)
source('C:/Users/achindha/Desktop/MS-Research/Experiments/Tibshirani2013/realData/BreastCancer.R', echo=TRUE)
source('C:/Users/achindha/Desktop/MS-Research/Experiments/Tibshirani2013/realData/BreastCancer.R', echo=TRUE)
source('C:/Users/achindha/Desktop/MS-Research/Experiments/Tibshirani2013/realData/BreastCancer.R', echo=TRUE)
cls
clear
install.packages(GSA)
install.packages("GSA")
source('C:/Users/achindha/Desktop/MS-Research/Experiments/Tibshirani2013/realData/BreastCancer.R', echo=TRUE)
#install.packages("ggplot2")
#install.packages("glmnet")
#install.packages("grplasso")
#install.packages("GSA")
install.packages("SGL")
source('C:/Users/achindha/Desktop/MS-Research/Experiments/Tibshirani2013/realData/BreastCancer.R', echo=TRUE)
source('C:/Users/achindha/Desktop/MS-Research/Experiments/Tibshirani2013/realData/BreastCancer.R', echo=TRUE)
source('C:/Users/achindha/Desktop/MS-Research/Experiments/Tibshirani2013/realData/BreastCancer.R', echo=TRUE)
source('C:/Users/achindha/Desktop/MS-Research/Experiments/Tibshirani2013/realData/BreastCancer.R', echo=TRUE)
source('C:/Users/achindha/Desktop/MS-Research/Experiments/Tibshirani2013/realData/BreastCancer.R', echo=TRUE)
source('C:/Users/achindha/Desktop/MS-Research/Experiments/Tibshirani2013/realData/BreastCancer.R', echo=TRUE)
source('C:/Users/achindha/Desktop/MS-Research/Experiments/Tibshirani2013/realData/BreastCancer.R', echo=TRUE)
source('C:/Users/achindha/Desktop/MS-Research/Experiments/Tibshirani2013/realData/BreastCancer.R', echo=TRUE)
train.data
source('C:/Users/achindha/Desktop/MS-Research/Experiments/Tibshirani2013/realData/BreastCancer.R', echo=TRUE)
source('C:/Users/achindha/Desktop/MS-Research/Experiments/Tibshirani2013/realData/BreastCancer.R', echo=TRUE)
source('C:/Users/achindha/Desktop/MS-Research/Experiments/Tibshirani2013/realData/colitis.R', echo=TRUE)
source('C:/Users/achindha/Desktop/MS-Research/Experiments/Tibshirani2013/realData/colitis.R', echo=TRUE)
source('C:/Users/achindha/Desktop/MS-Research/Experiments/Tibshirani2013/realData/colitis.R', echo=TRUE)
source('C:/Users/achindha/Desktop/MS-Research/Experiments/Tibshirani2013/realData/colitis.R', echo=TRUE)
warnings()
source('C:/Users/achindha/Desktop/MS-Research/Experiments/Tibshirani2013/realData/BreastCancer.R', echo=TRUE)
source('C:/Users/achindha/Desktop/MS-Research/Experiments/Tibshirani2013/realData/BreastCancer.R', echo=TRUE)
test.pred <- predict(fit, test.data$x, type = "class")
test.pred <- predict(fit, test.data$x, type = "class")
source('C:/Users/achindha/Desktop/MS-Research/Experiments/Tibshirani2013/realData/BreastCancer.R', echo=TRUE)
source('C:/Users/achindha/Desktop/MS-Research/Experiments/Tibshirani2013/realData/colitis.R', echo=TRUE)
source('C:/Users/achindha/Desktop/MS-Research/Experiments/Tibshirani2013/realData/colitis.R', echo=TRUE)
test.pred.SGL[,i] <- predict(fitSGL,test.data$x,i, type = "class")
test.pred.SGL[,i] <- predict(fitSGL,test.data$x,i, type = "SGL")
test.pred.SGL[,i] <- predict(fitSGL,test.data$x)
test.pred.SGL[,i] <- predict(fitSGL,test.data$x)
test.data
source('C:/Users/achindha/Desktop/MS-Research/Experiments/Tibshirani2013/realData/colitis.R', echo=TRUE)
test.pred.SGL[i] <- predict(fitSGL,test.data$x,i)
for(i in 1:length(fitSGL$lambdas)){
test.pred.SGL[i] <- predict(fitSGL,test.data$x,i)
}
test.pred <- predict(fitSGL,test.data$x,i)
test.pred.SGL[,i] <- predict(fitSGL,test.data$x,i)
for(i in 1:length(fitSGL$lambdas)){
test.pred.SGL[,i] <- predict(fitSGL,test.data$x,i)
}
predict(fitSGL,test.data$x,i)
for(i in 1:length(fitSGL$lambdas)){
predict(fitSGL,test.data$x,i)
}
gds1615 <- getGEO('GDS1615')
source('C:/Users/achindha/Desktop/MS-Research/Experiments/Tibshirani2013/realData/colitis.R', echo=TRUE)
test.pred.SGL[,i] <- predict(test.data$x,i)
for(i in 1:length(fitSGL$lambdas)){
test.pred.SGL[,i] <- predict(test.data$x,i)
}
test.pred.SGL[,i] <- predict(fitSGL,test.data,i)
test.pred.SGL[,i] <- predict(fitSGL,i)
test.pred.SGL[,i] <- predict(fitSGL$beta,test.data$x,i)
for(i in 1:length(fitSGL$lambdas)){
test.pred.SGL[,i] <- predict(fitSGL$beta,test.data$x,i)
}
test.pred.SGL[,i] <- predict(fitSGL$lambdas,test.data$x,i)
for(i in 1:length(fitSGL$lambdas)){
test.pred.SGL[,i] <- predict(fitSGL$lambdas,test.data$x,i)
}
correct.class.SGL <- (test.pred.SGL > 0.5) * test.data$y + (test.pred.SGL < 0.5)* (1-test.data$y)
correct.class <- (test.pred > 0.5) * test.data$y + (test.pred < 0.5)* (1-test.data$y)
correct.class.SGL <- (test.pred.SGL > 0.5) * test.data$y + (test.pred.SGL < 0.5)* (1-test.data$y)
correct.class.GL <- (test.pred.GL > 0.5) * test.data$y + (test.pred.GL < 0.5)* (1-test.data$y)
c.l <- apply(correct.class,2,mean)
c.l <- apply(correct.class,2,mean)
c.gl <- apply(correct.class.GL,2,mean)
c.sgl <- apply(correct.class.SGL,2,mean)
max(c.sgl)
max(c.gl)
max(c.l)
best.sgl <- which.max(c.sgl)
best.gl <- which.max(c.gl)
best.l <- which.max(c.l)
best.ind.SGL <- which(fitSGL$beta[,best.sgl] != 0)
best.ind.GL <- which(fitSGL$beta[,best.gl] != 0)
best.ind.l <- which(fit$beta[,best.l] != 0)
Gene.set.info$geneset.names[unique(membership.index[best.ind.SGL])]
Gene.set.info$geneset.names[unique(membership.index[best.ind.GL])]
unique(membership.index[best.ind.l])
c.class <- c(c.gl,c.l,c.sgl)
Method <- c(rep("GL", 100),rep("Lasso", 100),rep("SGL",100))
c.lambda <- c(1:100,1:100, 1:100)
## We plot the results
#pdf("colitis.pdf")
dd <- data.frame(Method = Method, x = c.lambda, y = c.class)
ggplot(data = dd, aes(x = x, y = y, group = Method, shape = Method)) + geom_line(aes(linetype=Method), size = 1.5) + scale_y_continuous("Correct Classification Rate") + scale_x_continuous("Lambda Index") + opts(title = "Correct Classification Rate for Cancer Data",legend.text = theme_text(size = 20), plot.title = theme_text(size = 22), axis.title.x = theme_text(size = 20), axis.title.y = theme_text(size = 20, angle = 90)) + scale_linetype_manual(values=c("twodash","dotted","solid")) + opts(legend.key.size = unit(2,"cm"))
#dev.off()
test.pred.SGL[,i] <- predict(fitSGL$intercept,test.data$x,i)
test.pred.SGL[,i] <- predict(fitSGL$X.transform,test.data$x,i)
for(i in 1:length(fitSGL$lambdas)){
test.pred.SGL[,i] <- predict(fitSGL$X.transform,test.data$x,i)
}
correct.class <- (test.pred > 0.5) * test.data$y + (test.pred < 0.5)* (1-test.data$y)
correct.class.SGL <- (test.pred.SGL > 0.5) * test.data$y + (test.pred.SGL < 0.5)* (1-test.data$y)
test.pred.SGL[,i] <- predict(fitSGL$X.transform,test.data$x,i)
